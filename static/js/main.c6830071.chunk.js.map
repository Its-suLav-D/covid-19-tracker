{"version":3,"sources":["Components/InfoBox.js","utils.js","Components/Map.js","Components/Table.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","props","Card","className","active","isRed","onClick","CardContent","Typography","color","title","isGreen","cases","total","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","center","zoom","TileLayer","url","attribution","casesType","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","countries","Table","App","useState","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","event","countryCode","target","value","fetch","then","response","json","useEffect","name","iso2","getCountrieSData","FormControl","Select","variant","onChange","MenuItem","alt","src","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6830071.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport {Card, CardContent, Typography} from '@material-ui/core';\r\n\r\nfunction InfoBox(props) {\r\n    return (\r\n        // If Active than add the class InfoBox--Selected. \r\n        <Card className={`InfoBox ${props.active && \"InfoBox--selected\"} ${props.isRed && \"InfoBox--red\"}`} onClick={props.onClick} >\r\n            <CardContent>\r\n                <Typography className=\"InfoBox_title\" color=\"textSecondary\">\r\n                    {props.title} \r\n                </Typography>\r\n                <h2 className={`InfoBox_cases ${props.isGreen && \"InfoBox_cases--green\"}`}>{props.cases} </h2>\r\n                <Typography className=\"InfoBox_total\">{props.total} Total </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\n\r\nimport {Circle, Popup} from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier:1200,\r\n    },\r\n    deaths: {\r\n        hex:\"#fb4443\",\r\n        multiplier: 2000,\r\n    }, \r\n};\r\n\r\n\r\nexport function sortData(data) {\r\n    const sortedData =[...data];\r\n    sortedData.sort((a,b)=> {\r\n        if(a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n}\r\n\r\nexport const showDataOnMap =(data, casesType=\"cases\")  => (\r\n    data.map(country => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"Popup_container\">\r\n                    <div \r\n                        className=\"Popup_flag\"\r\n                        style={ {backgroundImage:`url(${country.countryInfo.flag})`}}\r\n                    />\r\n                    <div className=\"Popup_name\">{country.country}</div>\r\n                    <div className=\"Popup_confirmed\">Cases:{numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"Popup_recovered\">Recovered:{numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"Popup_deaths\">Deaths:{numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n\r\n        </Circle>\r\n    ))\r\n);\r\n\r\n\r\nexport const prettyPrintStat = (stat) => {\r\n    return stat ? `${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n}","import React from 'react';\r\nimport \"./Map.css\"\r\nimport {Map as LeafLetMap, TileLayer} from \"react-leaflet\";\r\nimport {showDataOnMap} from '../utils';\r\n\r\nfunction Map(props) {\r\n    return (\r\n        <div className=\"Map\"> \r\n            <LeafLetMap center={props.center} zoom={props.zoom}>\r\n                <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">\r\n                    OpenStreetMap</a> contributors'\r\n                />\r\n                {/* Loop Through Country and draw a bunch of circles on the screen */}\r\n                {showDataOnMap(props.countries, props.casesType)}\r\n            </LeafLetMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table(props) {\r\n    return (\r\n        <div className=\"table\"> \r\n       {props.countries.map(country=> (\r\n           <tr>\r\n               <td>{country.country}</td>\r\n                <td><strong>{numeral(country.cases).format(\"0,0\")}</strong></td>\r\n           </tr>\r\n       ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport { FormControl, Select, MenuItem, Card, CardContent} from '@material-ui/core';\nimport InfoBox from './Components/InfoBox';\nimport Map from './Components/Map.js';\nimport Table from './Components/Table.js';\nimport {sortData, prettyPrintStat} from './utils.js'\n// import LineGraph from './Components/LineGraph.js';\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat:34.80746, lng:-40.4976\n  })\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const[casesType, setCasesType] = useState('cases');\n  useEffect(()=> {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response=> response.json())\n    .then(data=> {\n      setCountryInfo(data);\n    })\n  },[])  \n\n  useEffect(()=> {\n    const getCountrieSData = async() => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n      .then(response => response.json())\n      .then(data=> {\n        const countries = data.map(country => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2,\n            flag: country.countryInfo.flag\n          }\n        ))\n        setCountries(countries);\n        const sortedData = sortData(data)\n        setTableData(sortedData);\n\n        setMapCountries(data);\n      })\n    }\n    getCountrieSData();\n  },[])\n  \n  async function handleCountryChange(event) {\n    const countryCode= event.target.value;\n\n    const url = countryCode === 'worldwide'? 'https://disease.sh/v3/covid-19/all':\n    `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n    .then(response => response.json())\n    .then(data=> {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    })\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App_left\">\n        <div className=\"App_header\">\n          <h1 className=\"App_title\">Covid-19 Tracker</h1>\n          <FormControl className=\"App_dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={handleCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map(country=> (\n                <MenuItem value={country.value}>{country.name} <img alt=\"{country.name}\" src={country.flag} className=\"App_dropdown_img\"/></MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n       {/* Flex Box with three columns */}\n        <div className=\"Stats_box\">\n              <InfoBox \n              isRed\n              active={casesType === 'cases'}\n              onClick={e=> setCasesType('cases')}\n              title=\"CoronaVirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n              \n              <InfoBox\n              isGreen\n              active={casesType === 'recovered'}\n              onClick={e=> setCasesType('recovered')}\n               title=\"Recoveries\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n              \n              <InfoBox \n              isRed\n              active={casesType === 'deaths'}\n              onClick={e=> setCasesType('deaths')}\n              title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n      {/* Maps of the cases */}\n      <Map casesType ={casesType} countries ={mapCountries} center={mapCenter} zoom={mapZoom} />\n       \n      </div>\n      {/* Left CLoses Here  */}\n\n      <Card className=\"App_right\"> \n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData}></Table>\n          {/* <h3>Cases Bar Chart</h3>\n          <LineGraph className=\"App_graph\"/> */}\n        </CardContent>\n\n      </Card>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}